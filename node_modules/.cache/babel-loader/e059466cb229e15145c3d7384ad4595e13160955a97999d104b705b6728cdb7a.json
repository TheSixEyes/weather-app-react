{"ast":null,"code":"const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = process.env.REACT_APP_API_KEY;\nexport const fetchWeatherByCity = async cityOrZip => {\n  try {\n    const response = await fetch(`${BASE_URL}?q=${cityOrZip}&appid=${API_KEY}&units=metric`);\n    if (!response.ok) {\n      throw new Error('City or ZIP code not found');\n    }\n    const data = await response.json();\n    return {\n      ...data,\n      location: {\n        city: data.name,\n        state: data.sys.state || 'N/A',\n        // State is not always available\n        country: data.sys.country,\n        zip: cityOrZip.match(/^\\d+$/) ? cityOrZip : 'N/A' // If input is a ZIP code\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error;\n  }\n};\nexport const fetchWeatherForecast = async city => {\n  try {\n    const response = await fetch(`${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n    if (!response.ok) {\n      throw new Error('City not found');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching weather forecast:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","API_KEY","process","env","REACT_APP_API_KEY","fetchWeatherByCity","cityOrZip","response","fetch","ok","Error","data","json","location","city","name","state","sys","country","zip","match","error","console","fetchWeatherForecast"],"sources":["/Users/taylor/Desktop/Code/Weather/weather-app-react/src/utils/api.js"],"sourcesContent":["const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport const fetchWeatherByCity = async (cityOrZip) => {\n    try {\n        const response = await fetch(\n            `${BASE_URL}?q=${cityOrZip}&appid=${API_KEY}&units=metric`\n        );\n        if (!response.ok) {\n            throw new Error('City or ZIP code not found');\n        }\n        const data = await response.json();\n        return {\n            ...data,\n            location: {\n                city: data.name,\n                state: data.sys.state || 'N/A', // State is not always available\n                country: data.sys.country,\n                zip: cityOrZip.match(/^\\d+$/) ? cityOrZip : 'N/A', // If input is a ZIP code\n            },\n        };\n    } catch (error) {\n        console.error('Error fetching weather data:', error);\n        throw error;\n    }\n};\n\nexport const fetchWeatherForecast = async (city) => {\n    try {\n        const response = await fetch(`${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n        if (!response.ok) {\n            throw new Error('City not found');\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching weather forecast:', error);\n        throw error;\n    }\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,iDAAiD;AAClE,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,SAAS,IAAK;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAGR,QAAQ,MAAMM,SAAS,UAAUL,OAAO,eAC/C,CAAC;IACD,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IACjD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAO;MACH,GAAGD,IAAI;MACPE,QAAQ,EAAE;QACNC,IAAI,EAAEH,IAAI,CAACI,IAAI;QACfC,KAAK,EAAEL,IAAI,CAACM,GAAG,CAACD,KAAK,IAAI,KAAK;QAAE;QAChCE,OAAO,EAAEP,IAAI,CAACM,GAAG,CAACC,OAAO;QACzBC,GAAG,EAAEb,SAAS,CAACc,KAAK,CAAC,OAAO,CAAC,GAAGd,SAAS,GAAG,KAAK,CAAE;MACvD;IACJ,CAAC;EACL,CAAC,CAAC,OAAOe,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAG,MAAOT,IAAI,IAAK;EAChD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,eAAec,IAAI,UAAUb,OAAO,eAAe,CAAC;IAC5F,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACrC;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}