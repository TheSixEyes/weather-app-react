{"ast":null,"code":"var _jsxFileName = \"/Users/taylor/Desktop/Code/Weather/weather-app-react/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SearchBar from './components/SearchBar';\nimport WeatherCard from './components/WeatherCard';\nimport { fetchWeatherByCity } from './utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSearch = async city => {\n    setLoading(true);\n    setError(null); // Clear previous error\n    try {\n      const data = await fetchWeatherByCity(city);\n      setWeatherData(data);\n    } catch (err) {\n      setError('Could not fetch weather data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchWeatherByLocation = async () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        try {\n          const response = await fetch(`${BASE_URL}?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`);\n          const data = await response.json();\n          setWeatherData(data);\n        } catch (error) {\n          setError('Could not fetch weather data for your location.');\n        }\n      });\n    } else {\n      setError('Geolocation is not supported by your browser.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather App \\uD83C\\uDF26\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherCard, {\n      data: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"o9ldg1mhf3Uu2tG/YSVJvi0zah4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchBar","WeatherCard","fetchWeatherByCity","jsxDEV","_jsxDEV","App","_s","weatherData","setWeatherData","loading","setLoading","error","setError","handleSearch","city","data","err","fetchWeatherByLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","fetch","BASE_URL","API_KEY","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["/Users/taylor/Desktop/Code/Weather/weather-app-react/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport SearchBar from './components/SearchBar';\nimport WeatherCard from './components/WeatherCard';\nimport { fetchWeatherByCity } from './utils/api';\n\nconst App = () => {\n    const [weatherData, setWeatherData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const handleSearch = async (city) => {\n        setLoading(true);\n        setError(null); // Clear previous error\n        try {\n            const data = await fetchWeatherByCity(city);\n            setWeatherData(data);\n        } catch (err) {\n            setError('Could not fetch weather data. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchWeatherByLocation = async () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(async (position) => {\n                const { latitude, longitude } = position.coords;\n                try {\n                    const response = await fetch(\n                        `${BASE_URL}?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`\n                    );\n                    const data = await response.json();\n                    setWeatherData(data);\n                } catch (error) {\n                    setError('Could not fetch weather data for your location.');\n                }\n            });\n        } else {\n            setError('Geolocation is not supported by your browser.');\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            <h1>Weather App üå¶Ô∏è</h1>\n            <SearchBar onSearch={handleSearch} />\n            {loading && <p className=\"loading\">Loading...</p>}\n            {error && <p className=\"error\">{error}</p>}\n            {weatherData && <WeatherCard data={weatherData} />}\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}